toktok {

  activation-url = "http://localhost:2828/v1/users/activate"

  actors {
    supervisor {
      retries = 20
      within = 10s
    }
  }
}

krakken {

  source {
    container = "mongo_query"
    host = "192.168.59.103"
    db = "toktok"
    port = 27017

    collections {
      UserEvent {
        container = "mongo_command"
        host = "192.168.59.103"
        db = "toktok"
        port = 27017
      }
    }
  }

  actors {
    timeout = 10s
  }
}

postmark {
  batch-url = "http://api.postmarkapp.com/email/batch"
  send-url = "http://api.postmarkapp.com/email"
  email-from = "info@toktok.io"
  api-key = "a0a21995-5c0b-452d-a3e3-c3ce1efc5d94"
}


akka {

  # when tracing with atmos use this logger instead
  #loggers = ["com.typesafe.atmos.trace.Slf4jTraceContextLogger"]
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "DEBUG"

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "DEBUG"

  actor {
    guardian-supervisor-strategy = "io.toktok.notifications.NotificationsGuardianStrategy"
    provider = "akka.remote.RemoteActorRefProvider"
  }
  remote {
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
      hostname = "127.0.0.1"
      port = 28003
    }
  }
}

atmos {
  trace {
    enabled = false
    node = toktok

    traceable {
      "*" = off
    }
    sampling {
      "*" = 1
    }
  }
}
