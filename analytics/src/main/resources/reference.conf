toktok {

  port = 4646

  host = "0.0.0.0"

  analytics-coll = "toktok"

  http {
    timeout = 20 seconds
  }

}

krakken {

  source {
    container = "mongo_analytics"
    host = "192.168.59.103"
    port = 27012
    db = "analytics"
  }

  actors {
    timeout = 5s
  }

}


akka {

  # when tracing with atmos use this logger instead
  #loggers = ["com.typesafe.atmos.trace.Slf4jTraceContextLogger"]
  loggers = ["akka.event.slf4j.Slf4jLogger"]

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "DEBUG"

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "DEBUG"

  actor {
    guardian-supervisor-strategy = "io.toktok.analytics.AnalyticsGuardianStrategy"
    provider = "akka.actor.LocalActorRefProvider"
    deployment {
      /AnalyticsPersister/router {
        router = "round-robin-pool"
        nr-of-instances = 50
        resizer {
          # The fewest number of routees the router should ever have.Â£
          lower-bound = 10

          # The most number of routees the router should ever have.
          # Must be greater than or equal to lower-bound.
          upper-bound = 100

          # Threshold used to evaluate if a routee is considered to be busy
          # (under pressure). Implementation depends on this value (default is 1).
          # 0:   number of routees currently processing a message.
          # 1:   number of routees currently processing a message has
          #      some messages in mailbox.
          # > 1: number of routees with at least the configured pressure-threshold
          #      messages in their mailbox. Note that estimating mailbox size of
          #      default UnboundedMailbox is O(N) operation.
          pressure-threshold = 1

          # Percentage to increase capacity whenever all routees are busy.
          # For example, 0.2 would increase 20% (rounded up), i.e. if current
          # capacity is 6 it will request an increase of 2 more routees.
          rampup-rate = 0.2

          # Minimum fraction of busy routees before backing off.
          # For example, if this is 0.3, then we'll remove some routees only when
          # less than 30% of routees are busy, i.e. if current capacity is 10 and
          # 3 are busy then the capacity is unchanged, but if 2 or less are busy
          # the capacity is decreased.
          # Use 0.0 or negative to avoid removal of routees.
          backoff-threshold = 0.3

          # Fraction of routees to be removed when the resizer reaches the
          # backoffThreshold.
          # For example, 0.1 would decrease 10% (rounded up), i.e. if current
          # capacity is 9 it will request an decrease of 1 routee.
          backoff-rate = 0.1

          # When the resizer reduce the capacity the abandoned routee actors are
          # stopped with PoisonPill after this delay. The reason for the delay is
          # to give concurrent messages a chance to be placed in mailbox before
          # sending PoisonPill.
          # Use 0s to skip delay.
          stop-delay = 1s

          # Number of messages between resize operation.
          # Use 1 to resize before each message.
          messages-per-resize = 10
        }
      }
    }
  }
}

spray {
  compact-json-printing = yes

  can {
    client {
      # The max time period that a client connection will be waiting for a response
      # before triggering a request timeout. The timer for this logic is not started
      # until the connection is actually in a state to receive the response, which
      # may be quite some time after the request has been received from the
      # application!
      # There are two main reasons to delay the start of the request timeout timer:
      # 1. On the host-level API with pipelining disabled:
      #    If the request cannot be sent immediately because all connections are
      #    currently busy with earlier requests it has to be queued until a
      #    connection becomes available.
      # 2. With pipelining enabled:
      #    The request timeout timer starts only once the response for the
      #    preceding request on the connection has arrived.
      # Set to `infinite` to completely disable request timeouts.
      request-timeout = infinite

      # The time period within which the TCP connecting process must be completed.
      # Set to `infinite` to disable.
      connecting-timeout = infinite
    }

    host-connector {
      # The maximum number of parallel connections that an `HttpHostConnector`
      # is allowed to establish to a host. Must be greater than zero.
      max-connections = 4

      # The maximum number of times an `HttpHostConnector` attempts to repeat
      # failed requests (if the request can be safely retried) before
      # giving up and returning an error.
      max-retries = 5

      # If this setting is enabled, the `HttpHostConnector` pipelines requests
      # across connections, otherwise only one single request can be "open"
      # on a particular HTTP connection.
      pipelining = on

    }
    # Fully qualified config path which holds the dispatcher configuration
    # to be used for the HttpManager.
    manager-dispatcher = "akka.actor.default-dispatcher"

    # Fully qualified config path which holds the dispatcher configuration
    # to be used for the HttpClientSettingsGroup actors.
    settings-group-dispatcher = "akka.actor.default-dispatcher"

    # Fully qualified config path which holds the dispatcher configuration
    # to be used for the HttpHostConnector actors.
    host-connector-dispatcher = "akka.actor.default-dispatcher"

    # Fully qualified config path which holds the dispatcher configuration
    # to be used for HttpListener actors.
    listener-dispatcher = "akka.actor.default-dispatcher"

    # Fully qualified config path which holds the dispatcher configuration
    # to be used for HttpServerConnection and HttpClientConnection actors.
    connection-dispatcher = "akka.actor.default-dispatcher"
    server {
      request-timeout = 12s
      idle-timeout = 15s
    }
  }

  # check the reference.conf in /spray-routing/main/resources for all defined settings
  routing {
    file-chunking-threshold-size = 10k
    file-chunking-chunk-size = 5k
    verbose-error-messages = on
    render-vanity-footer = on
  }
}
